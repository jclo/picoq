// ESLint declarations
/* global define */
/* eslint strict: ["error", "function"], one-var: 0 */
/* eslint-disable no-param-reassign, no-underscore-dangle */
(function(root, factory) {
  'use strict';

  /* istanbul ignore next */
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([''], factory);
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(root);
  } else {
    // Browser globals:
    root.PicoQ = factory(root);
  }
}({{lib:parent}}, function(root) {
  'use strict';

  var PicoQ
    , previousPicoQ
    , windo
    , docu
    , _
    , _u
    ;

  // Saves the previous value of the library variable, so that it can be
  // restored later on, if noConflict is used.
  previousPicoQ = root.PicoQ;

  // Initializes the library:
  /* istanbul ignore next */
  PicoQ = {};

  // Runs PicoQ in noConflict mode, returning the PicoQ variable to its
  // previous owner. Returns a reference to this PicoQ object.
  /* istanbul ignore next */
  PicoQ.noConflict = function() {
    root.PicoQ = previousPicoQ;
    return this;
  };

  // Current version of the library:
  PicoQ.VERSION = '{{lib:version}}';
  /* eslint-enable no-param-reassign, no-underscore-dangle */
